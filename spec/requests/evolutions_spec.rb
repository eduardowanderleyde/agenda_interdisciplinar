require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/evolutions", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Evolution. As you add validations to Evolution, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  let(:admin) { create(:user, :admin) }
  let(:prof) { create(:user, :professional) }
  let(:other_prof) { create(:user, :professional) }
  let(:patient) { Patient.create!(name: 'Paciente', birthdate: '2010-01-01', diagnosis: 'TEA', observations: 'Teste') }
  let(:professional) { create(:professional, user: prof) }
  let(:appointment) { create(:appointment, professional: professional) }
  let(:evolution) { create(:evolution, appointment: appointment) }

  before { professional.update(user_id: prof.id) }

  describe "GET /index" do
    it "renders a successful response" do
      sign_in admin
      get evolutions_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      sign_in admin
      get evolution_url(evolution)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      sign_in admin
      get new_evolution_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      sign_in admin
      get edit_evolution_url(evolution)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Evolution" do
        sign_in admin
        expect {
          post evolutions_url, params: { evolution: { appointment_id: appointment.id, content: "New content", next_steps: "New steps" } }
        }.to change(Evolution, :count).by(1)
      end

      it "redirects to the created evolution" do
        sign_in admin
        post evolutions_url, params: { evolution: { appointment_id: appointment.id, content: "New content", next_steps: "New steps" } }
        expect(response).to redirect_to(evolution_url(Evolution.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Evolution" do
        sign_in admin
        expect {
          post evolutions_url, params: { evolution: { appointment_id: nil } }
        }.to change(Evolution, :count).by(0)
      end

      it "renders a response with 422 status" do
        sign_in admin
        post evolutions_url, params: { evolution: { appointment_id: nil } }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested evolution" do
        sign_in admin
        patch evolution_url(evolution), params: { evolution: { content: "Updated content" } }
        evolution.reload
        expect(evolution.content).to eq("Updated content")
      end

      it "redirects to the evolution" do
        sign_in admin
        patch evolution_url(evolution), params: { evolution: { content: "Updated content" } }
        expect(response).to redirect_to(evolution_url(evolution))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status" do
        sign_in admin
        patch evolution_url(evolution), params: { evolution: { appointment_id: nil } }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested evolution" do
      sign_in admin
      expect {
        delete evolution_url(evolution)
      }.to change(Evolution, :count).by(-1)
    end

    it "redirects to the evolutions list" do
      sign_in admin
      delete evolution_url(evolution)
      expect(response).to redirect_to(evolutions_url)
    end
  end

  describe "permissions" do
    it "permite admin acessar qualquer evolução" do
      sign_in admin
      get evolution_url(evolution)
      expect(response).to be_successful
    end

    it "permite profissional acessar sua própria evolução" do
      sign_in prof
      get evolution_url(evolution)
      expect(response).to be_successful
    end

    it "nega acesso a outro profissional" do
      sign_in other_prof
      get evolution_url(evolution)
      expect(response).to redirect_to(root_path)
    end
  end
end
